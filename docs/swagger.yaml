openapi: 3.0.0
info:
  title: E-Commerce API
  version: 1.0.0
  description: API documentation for the E-Commerce backend with Prisma, JWT Auth, and Socket.io

servers:
  - url: http://localhost:5000/api
    description: Local server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        stock:
          type: integer
        description:
          type: string
        imageUrl:
          type: string
        category:
          $ref: "#/components/schemas/Category"
    Order:
      type: object
      properties:
        id:
          type: integer
        quantity:
          type: integer
        total:
          type: number
        product:
          $ref: "#/components/schemas/Product"

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password, role]
              properties:
                username:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [user, admin]
      responses:
        "201":
          description: Registration successful
        "400":
          description: Validation error
        "500":
          description: Server error

  /auth/login:
    post:
      summary: Login and receive JWT token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "401":
          description: Invalid credentials

  /categories:
    get:
      summary: Get all categories
      tags: [Categories]
      responses:
        "200":
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
    post:
      summary: Create a category
      tags: [Categories]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
      responses:
        "201":
          description: Category created
        "400":
          description: Failed to create category

  /categories/{id}:
    put:
      summary: Update a category
      tags: [Categories]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "200":
          description: Category updated
    delete:
      summary: Delete a category
      tags: [Categories]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Category deleted

  /products:
    get:
      summary: Get all products (optional filter by categoryId)
      tags: [Products]
      parameters:
        - name: categoryId
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      summary: Create a product
      tags: [Products]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, price, stock, categoryId, description, image]
              properties:
                name:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                categoryId:
                  type: integer
                description:
                  type: string
                image:
                  type: string
      responses:
        "201":
          description: Product created

  /products/{id}:
    put:
      summary: Update a product
      tags: [Products]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                categoryId:
                  type: integer
                description:
                  type: string
                image:
                  type: string
      responses:
        "200":
          description: Product updated
    delete:
      summary: Delete a product
      tags: [Products]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Product deleted

  /orders:
    get:
      summary: Get all orders
      tags: [Orders]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      summary: Create an order
      tags: [Orders]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [productId, quantity]
              properties:
                productId:
                  type: integer
                quantity:
                  type: integer
      responses:
        "201":
          description: Order created
